// Generated by gencpp from file vision/face_box.msg
// DO NOT EDIT!


#ifndef VISION_MESSAGE_FACE_BOX_H
#define VISION_MESSAGE_FACE_BOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace vision
{
template <class ContainerAllocator>
struct face_box_
{
  typedef face_box_<ContainerAllocator> Type;

  face_box_()
    : top_left()
    , width_height()  {
    }
  face_box_(const ContainerAllocator& _alloc)
    : top_left(_alloc)
    , width_height(_alloc)  {
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _top_left_type;
  _top_left_type top_left;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _width_height_type;
  _width_height_type width_height;




  typedef boost::shared_ptr< ::vision::face_box_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision::face_box_<ContainerAllocator> const> ConstPtr;

}; // struct face_box_

typedef ::vision::face_box_<std::allocator<void> > face_box;

typedef boost::shared_ptr< ::vision::face_box > face_boxPtr;
typedef boost::shared_ptr< ::vision::face_box const> face_boxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision::face_box_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision::face_box_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'vision': ['/home/abeni/rob/src/vision/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision::face_box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision::face_box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::face_box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision::face_box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::face_box_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision::face_box_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision::face_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9bdccc133bdc2e2db906756187d7a6f5";
  }

  static const char* value(const ::vision::face_box_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9bdccc133bdc2e2dULL;
  static const uint64_t static_value2 = 0xb906756187d7a6f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision::face_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision/face_box";
  }

  static const char* value(const ::vision::face_box_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision::face_box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point top_left\n\
geometry_msgs/Point width_height\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::vision::face_box_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision::face_box_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.top_left);
      stream.next(m.width_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct face_box_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision::face_box_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision::face_box_<ContainerAllocator>& v)
  {
    s << indent << "top_left: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.top_left);
    s << indent << "width_height: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.width_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MESSAGE_FACE_BOX_H
